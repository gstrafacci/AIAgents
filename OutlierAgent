import numpy as np
import pandas as pd
from scipy import stats
from typing import List, Dict, Tuple, Optional
import datetime
import json
from dataclasses import dataclass
import logging
import time

# Configuração de logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@dataclass
class ProcessData:
    """Classe para armazenar dados do processo"""
    timestamp: datetime.datetime
    value: float
    parameter_values: Dict[str, float]

@dataclass
class Alert:
    """Classe para armazenar alertas gerados"""
    timestamp: datetime.datetime
    message: str
    severity: str
    source: str

class ProcessAnalyzer:
    """Classe base para análise de processos"""
    def __init__(self, process_name: str):
        self.process_name = process_name
        self.alerts: List[Alert] = []
        
    def add_alert(self, message: str, severity: str, source: str):
        """Adiciona um novo alerta"""
        alert = Alert(
            timestamp=datetime.datetime.now(),
            message=message,
            severity=severity,
            source=source
        )
        self.alerts.append(alert)
        logger.info(f"Novo alerta: {alert.message}")

class OutlierAgent(ProcessAnalyzer):
    """Agente especializado em detecção de outliers e causas especiais"""
    
    def __init__(self, process_name: str):
        super().__init__(process_name)
        self.control_limits: Dict[str, float] = {}
        
    def calculate_control_limits(self, data: List[float], sigma: float = 3) -> Dict[str, float]:
        """Calcula limites de controle baseados nos dados"""
        mean_val = np.mean(data)
        std_val = np.std(data)
        
        self.control_limits = {
            'ucl': mean_val + (sigma * std_val),
            'lcl': mean_val - (sigma * std_val),
            'mean': mean_val
        }
        
        return self.control_limits
    
    def detect_outliers(self, data: List[ProcessData]) -> List[Tuple[datetime.datetime, float]]:
        """Detecta outliers nos dados do processo"""
        values = [d.value for d in data]
        timestamps = [d.timestamp for d in data]
        
        # Calcula limites se ainda não existirem
        if not self.control_limits:
            self.calculate_control_limits(values)
            
        outliers = []
        for i, value in enumerate(values):
            if value > self.control_limits['ucl'] or value < self.control_limits['lcl']:
                outliers.append((timestamps[i], value))
                self.add_alert(
                    f"Outlier detectado: {value:.2f} em {timestamps[i]}",
                    "alto" if value > self.control_limits['ucl'] else "baixo",
                    "OutlierAgent"
                )
                
        return outliers
    
    def analyze_patterns(self, data: List[ProcessData]) -> List[str]:
        """Analisa padrões especiais nos dados"""
        values = [d.value for d in data]
        patterns = []
        
        # Tendências (7 pontos consecutivos crescentes ou decrescentes)
        for i in range(len(values)-6):
            window = values[i:i+7]
            if all(window[j] < window[j+1] for j in range(len(window)-1)):
                patterns.append(f"Tendência crescente detectada a partir de {data[i].timestamp}")
            elif all(window[j] > window[j+1] for j in range(len(window)-1)):
                patterns.append(f"Tendência decrescente detectada a partir de {data[i].timestamp}")
                
        return patterns

class CorrelationAgent(ProcessAnalyzer):
    """Agente especializado em análise de correlações e causas raíz"""
    
    def __init__(self, process_name: str):
        super().__init__(process_name)
        self.correlation_threshold = 0.7
        self.known_correlations: Dict[str, float] = {}
        
    def analyze_correlations(self, data: List[ProcessData]) -> Dict[str, float]:
        """Analisa correlações entre o processo e parâmetros"""
        process_values = np.array([d.value for d in data])
        correlations = {}
        
        # Analisa cada parâmetro disponível
        for param in data[0].parameter_values.keys():
            param_values = np.array([d.parameter_values[param] for d in data])
            correlation, p_value = stats.pearsonr(process_values, param_values)
            
            if abs(correlation) > self.correlation_threshold and p_value < 0.05:
                correlations[param] = correlation
                self.add_alert(
                    f"Correlação significativa encontrada com {param}: {correlation:.2f}",
                    "média",
                    "CorrelationAgent"
                )
                
        self.known_correlations = correlations
        return correlations
    
    def suggest_root_causes(self, outlier_timestamp: datetime.datetime, data: List[ProcessData]) -> List[str]:
        """Sugere possíveis causas raíz para um outlier"""
        relevant_data = [d for d in data if abs((d.timestamp - outlier_timestamp).total_seconds()) < 3600]
        suggestions = []
        
        # Analisa parâmetros correlacionados no momento do outlier
        for param, correlation in self.known_correlations.items():
            param_values = [d.parameter_values[param] for d in relevant_data]
            param_mean = np.mean(param_values)
            param_std = np.std(param_values)
            
            for d in relevant_data:
                if abs(d.parameter_values[param] - param_mean) > 2 * param_std:
                    suggestions.append(
                        f"Parâmetro {param} apresentou valor anormal "
                        f"({d.parameter_values[param]:.2f}) próximo ao outlier"
                    )
                    
        return suggestions

class ProcessMonitor:
    """Classe principal que coordena os agentes"""
    
    def __init__(self, process_name: str):
        self.process_name = process_name
        self.outlier_agent = OutlierAgent(process_name)
        self.correlation_agent = CorrelationAgent(process_name)
        self.data: List[ProcessData] = []
        
    def add_data(self, new_data: ProcessData):
        """Adiciona novos dados e aciona análise"""
        self.data.append(new_data)
        self._analyze_latest_data()
        
    def _analyze_latest_data(self):
        """Coordena a análise entre os agentes"""
        # Simula tempo de processamento
        time.sleep(1)
        logger.info("Agente Outlier iniciando análise...")
        
        # Análise de outliers
        outliers = self.outlier_agent.detect_outliers(self.data)
        patterns = self.outlier_agent.analyze_patterns(self.data)
        
        time.sleep(1)
        logger.info("Agente Correlação iniciando análise...")
        
        # Análise de correlações
        correlations = self.correlation_agent.analyze_correlations(self.data)
        
        # Para cada outlier encontrado, busca causas raíz
        for outlier_timestamp, _ in outliers:
            suggestions = self.correlation_agent.suggest_root_causes(outlier_timestamp, self.data)
            for suggestion in suggestions:
                logger.info(f"Sugestão de causa raíz: {suggestion}")
                
    def get_summary(self) -> Dict:
        """Retorna um resumo das análises"""
        return {
            'process_name': self.process_name,
            'data_points': len(self.data),
            'outlier_alerts': len(self.outlier_agent.alerts),
            'correlation_alerts': len(self.correlation_agent.alerts),
            'control_limits': self.outlier_agent.control_limits,
            'known_correlations': self.correlation_agent.known_correlations
        }

# Exemplo de uso
def main():
    # Criação do monitor
    monitor = ProcessMonitor("Processo de Produção")
    
    # Simulação de dados
    for i in range(100):
        # Simula dados do processo com alguns outliers
        base_value = 100
        noise = np.random.normal(0, 5)
        outlier_factor = 30 if i in [20, 50, 80] else 0
        
        # Simula parâmetros do processo
        temperature = base_value + noise + outlier_factor/2
        pressure = base_value - noise + outlier_factor/3
        humidity = base_value + np.sin(i/10) * 10
        
        # Cria dado do processo
        process_data = ProcessData(
            timestamp=datetime.datetime.now() + datetime.timedelta(minutes=i),
            value=base_value + noise + outlier_factor,
            parameter_values={
                'temperature': temperature,
                'pressure': pressure,
                'humidity': humidity
            }
        )
        
        # Adiciona dado ao monitor
        monitor.add_data(process_data)
        
    # Imprime resumo final
    print(json.dumps(monitor.get_summary(), indent=2))

if __name__ == "__main__":
    main()
